{"version":3,"sources":["dropdown/dropdown.js","mortgageCalculator/mortgageCalculator.js","Utilities/Utilities.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","value","array","handler","index","onChange","className","map","option","key","checkLocalStorage","localStorage","getItem","storedDeposit","storedHousePrice","clearPlaceholder","event","target","placeholder","initPlaceholder","name","mortgageCalculator","props","listenForEnterKey","calculateButton","currentInterest","interestArray","interestDropdownHandler","termLength","termLengthArray","termDropdownHandler","inputPriceHandler","onFocus","onBlur","onKeyPress","defaultValue","monthlyPayment","id","onClick","resetBtnHandler","formatter","Intl","NumberFormat","style","currency","App","initialState","interestAmount","deposit","housePrice","state","e","isNaN","length","slice","updateLocalStorage","setState","setItem","resetCalculator","clear","document","querySelectorAll","forEach","input","querySelector","classList","add","calculateMonthlyPayment","mortgageAmount","interest","term","Math","pow","setupMortgageCalculation","interestRate","mortgage","alert","Currency","format","remove","this","bind","href","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ad52d02.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\nconst Dropdown = (value,array,handler) => {\r\n    let index = 0;\r\n    return (\r\n        <select value={value} onChange={handler} className=\"Dropdown\">\r\n        {array.map((option)=>\r\n            <option key={index++} value={option}>{option}</option>\r\n        )}\r\n        </select>\r\n    );\r\n}\r\n\r\nexport default Dropdown;","import React from 'react';\r\nimport Dropdown from '../dropdown/dropdown';\r\n\r\nconst depositText = \"Please enter a deposit value\";\r\nconst houseText = \"Please enter a house value\";\r\n\r\nconst checkLocalStorage = (key) => {\r\n    if(localStorage.getItem(key) === \"\"){\r\n        return null;\r\n    } else return localStorage.getItem(key);\r\n}\r\n\r\nexport const storedDeposit = checkLocalStorage(\"deposit\");\r\nexport const storedHousePrice = checkLocalStorage(\"housePrice\");\r\n\r\nconst mortgageCalculator = (props) => {\r\n    //we listen if the user enters \"enter\" it will calculate the result\r\n    //rather than make them press the button every time\r\n    const listenForEnterKey = (event) => {\r\n        if(event.key === \"Enter\"){\r\n            props.calculateButton();\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Mortgage Calculator</h1>\r\n            <div className=\"dropdown-container\">\r\n                <h2>Interest rate (%)</h2>\r\n                {/* Drop down component, this populates from the interestArray in the state */}\r\n                {Dropdown(\r\n                    props.currentInterest,\r\n                    props.interestArray,\r\n                    props.interestDropdownHandler)}\r\n            </div>\r\n            <div className=\"dropdown-container\">\r\n                <h2>Term length (years)</h2>\r\n                {Dropdown(\r\n                    props.termLength,\r\n                    props.termLengthArray,\r\n                    props.termDropdownHandler)}\r\n            </div>\r\n            <div>\r\n                <h2>Deposit (£)</h2>\r\n                <input \r\n                name = \"deposit\"\r\n                onChange={props.inputPriceHandler}\r\n                onFocus={clearPlaceholder}\r\n                onBlur={initPlaceholder}\r\n                placeholder={depositText}\r\n                onKeyPress={listenForEnterKey}\r\n                defaultValue={storedDeposit}\r\n                ></input>\r\n            </div>\r\n            <div>\r\n                <h2>House price (£)</h2>\r\n                <input\r\n                //this 'name' field is used to link the...\r\n                //property name when used to change state\r\n                name = \"housePrice\"\r\n                onChange={props.inputPriceHandler}\r\n                onFocus={clearPlaceholder}\r\n                onBlur={initPlaceholder}\r\n                placeholder={houseText}\r\n                onKeyPress={listenForEnterKey}\r\n                defaultValue={storedHousePrice}\r\n                ></input>\r\n            </div>\r\n            {/* displays the total to the user */}\r\n            <h2>Monthly payment amount</h2>\r\n            <h2>{props.monthlyPayment}</h2>\r\n            <div className=\"buttonContainer\">\r\n                <button id=\"calcBtn\" onClick={props.calculateButton}>Calculate</button>\r\n                <button id=\"resetBtn\" className=\"hidden\" onClick={props.resetBtnHandler}>Reset</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst clearPlaceholder = (event) => {\r\n    event.target.placeholder = \"\";\r\n  }\r\n  \r\nconst initPlaceholder = (event) => {\r\n    if(event.target.name === \"deposit\"){\r\n        event.target.placeholder = depositText;\r\n    }\r\n    else event.target.placeholder = houseText;\r\n  }\r\n\r\n\r\nexport default mortgageCalculator;","//This uses the .numberFormat to convert the int into currency\r\nconst formatter = new Intl.NumberFormat('en-EU', {\r\n    style: 'currency',\r\n    currency: 'GBP',\r\n  })\r\n\r\n  export default formatter;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport MortgageCalc from \"./mortgageCalculator/mortgageCalculator.js\";\r\nimport Currency from \"./Utilities/Utilities\";\r\nimport {storedDeposit} from './mortgageCalculator/mortgageCalculator.js';\r\nimport {storedHousePrice} from './mortgageCalculator/mortgageCalculator.js';\r\n\r\nclass App extends Component {\r\n  interestArray = [0.5,1.0,2.0,2.5,3,3.5];\r\n  termLengthArray = [10,15,20,25,30,35,40];\r\n\r\n  initialState = {\r\n    interestAmount: 2.5,\r\n    deposit: storedDeposit,\r\n    housePrice: storedHousePrice,\r\n    termLength: 25,\r\n    monthlyPayment: 0,\r\n  }\r\n  //sets the inital state of the app\r\n  state = {\r\n    ...this.initialState\r\n  };\r\n\r\n  inputPriceHandler = (e) => {\r\n    const maxLength = 8;\r\n    //checks for the value, if its not a number, dont update the value.\r\n    if(isNaN(e.target.value)) e.target.value = \"\";\r\n    //also checks the length to make sure its appropriate\r\n    else if(e.target.value.length > maxLength) {\r\n      //keeps the input to a length of maxLength\r\n      e.target.value = e.target.value.slice(0,maxLength);\r\n    }\r\n    this.updateLocalStorage(e.target.name, e.target.value);\r\n    //set the state to the new value entered\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    })\r\n  };\r\n\r\n  updateLocalStorage = (key, value) => {\r\n    localStorage.setItem(key, value);\r\n  }\r\n\r\n  //handles the on change for the select event\r\n  interestDropdownHandler = (event) => {\r\n    this.setState({\r\n      interestAmount: event.target.value,\r\n    })\r\n  }  \r\n  termDropdownHandler = (event) => {\r\n    this.setState({\r\n      termLength: event.target.value,\r\n    })\r\n  }\r\n\r\n  resetCalculator = (event) => {\r\n    //clear local storage\r\n    localStorage.clear();\r\n    //reset the state to the initial state\r\n    this.setState({\r\n      ...this.initialState\r\n    })\r\n    //reset the inputs\r\n   let inputs = document.querySelectorAll(\"input\");\r\n   inputs.forEach(input => {\r\n     input.value = null;\r\n   });\r\n   //hide the reset button\r\n   document.querySelector(\"#resetBtn\").classList.add(\"hidden\");\r\n  }\r\n\r\n  calculateMonthlyPayment = (mortgageAmount, interest, term) =>\r\n  {\r\n    interest /= 1200;\r\n    term *= 12;\r\n    let monthlyPayment = 0;\r\n    //do an extra check if interest is 0 or lower, we dont need to do the calculation.\r\n    if(interest <= 0){\r\n      monthlyPayment = mortgageAmount / term;\r\n    }\r\n    else {\r\n      monthlyPayment = mortgageAmount*(interest * Math.pow((1 + interest), term));\r\n      monthlyPayment /= (Math.pow((1 + interest), term) - 1);\r\n    }\r\n    return monthlyPayment;\r\n  }\r\n\r\n  setupMortgageCalculation = (deposit, housePrice, interestRate, termLength) => {\r\n    //variables for calculations\r\n    let monthlyPayment = 0;\r\n    let mortgage = housePrice - deposit;\r\n    //check to make sure house value has an appropriate value\r\n    if(housePrice <= 0) {\r\n      alert(\"No house value entered\");\r\n      return;\r\n    }\r\n    //check to see if the mortgage isnt already paid\r\n    if(mortgage <= 0) {\r\n      monthlyPayment = \"You've paid it all with the deposit!\";\r\n    }\r\n    else {\r\n      monthlyPayment = this.calculateMonthlyPayment(mortgage,interestRate,termLength);\r\n      //format the monthlyPayment into currency\r\n      monthlyPayment = Currency.format(monthlyPayment);\r\n      monthlyPayment += \" per month\";\r\n    }\r\n    //show the reset button\r\n    document.querySelector(\"#resetBtn\").classList.remove(\"hidden\");\r\n    //set the state to the new calc'd value\r\n    this.setState({\r\n      monthlyPayment: monthlyPayment,\r\n    })\r\n  };\r\n  render(){\r\n    return (\r\n      <div className=\"MortgageCalc\">\r\n        <MortgageCalc \r\n        //props for the main app-container.js\r\n        inputPriceHandler={this.inputPriceHandler}\r\n        monthlyPayment={this.state.monthlyPayment}\r\n        //Interest drop down\r\n        currentInterest={this.state.interestAmount}\r\n        interestDropdownHandler={this.interestDropdownHandler}\r\n        interestArray={this.interestArray}\r\n        //Term drop down\r\n        termLength={this.state.termLength}\r\n        termDropdownHandler={this.termDropdownHandler}\r\n        termLengthArray={this.termLengthArray}\r\n        //calculate button\r\n        calculateButton={this.setupMortgageCalculation.bind(this,\r\n          this.state.deposit,\r\n          this.state.housePrice,\r\n          this.state.interestAmount,\r\n          this.state.termLength)}\r\n        //reset button\r\n        resetBtnHandler={this.resetCalculator}\r\n        />\r\n        <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@300;500&display=swap\" rel=\"stylesheet\"></link>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}